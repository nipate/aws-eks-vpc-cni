name: ArgoCD Upgrade Pipeline with Dry Run

on:
  workflow_dispatch:
    inputs:
      target_version:
        description: 'Target ArgoCD version'
        required: true
        default: 'v2.15.0'
      helm_chart_version:
        description: 'Target Helm chart version'
        required: true
        default: '7.6.12'
      skip_dry_run:
        description: 'Skip dry run and proceed directly to upgrade'
        type: boolean
        default: false

env:
  NAMESPACE: argocd
  CLUSTER_NAME: vpc-cni-argocd-poc
  REGION: us-east-1
  S3_BACKUP_BUCKET: "argocd-upgrade-backups"  # S3 bucket for persistent backups

jobs:
  dry-run-validation:
    runs-on: ubuntu-latest
    outputs:
      dry-run-success: ${{ steps.dry-run.outputs.success }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.REGION }}
        
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region $REGION --name $CLUSTER_NAME
        
    - name: Install Helm
      uses: azure/setup-helm@v4
      with:
        version: '3.12.0'
        
    - name: Add ArgoCD Helm repo
      run: |
        helm repo add argo https://argoproj.github.io/argo-helm
        helm repo update
        
    - name: Validate ArgoCD version
      run: |
        cd argocd
        chmod +x validate-version.sh
        ./validate-version.sh ${{ github.event.inputs.target_version }}
        
    - name: Run dry run validation
      id: dry-run
      env:
        S3_BACKUP_BUCKET: ${{ env.S3_BACKUP_BUCKET }}
      run: |
        cd argocd
        chmod +x upgrade-comprehensive.sh
        
        # Run dry run and capture output
        if ./upgrade-comprehensive.sh ${{ github.event.inputs.target_version }} ${{ github.event.inputs.helm_chart_version }} true > dry-run-output.log 2>&1; then
          echo "success=true" >> $GITHUB_OUTPUT
          echo "✅ Comprehensive dry run validation successful"
        else
          echo "success=false" >> $GITHUB_OUTPUT
          echo "❌ Dry run validation failed"
          cat dry-run-output.log
          exit 1
        fi
        
    - name: Upload dry run artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dry-run-results-${{ github.run_number }}
        path: |
          argocd/dry-run-output.log
          argocd/backup/
        retention-days: 7
        
    - name: Dry run summary
      run: |
        echo "## 🧪 Dry Run Results" >> $GITHUB_STEP_SUMMARY
        echo "- **Target Version**: ${{ github.event.inputs.target_version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Chart Version**: ${{ github.event.inputs.helm_chart_version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ✅ Validation Successful" >> $GITHUB_STEP_SUMMARY
        echo "- **Next Step**: Manual approval required for actual upgrade" >> $GITHUB_STEP_SUMMARY

  approval-gate:
    needs: [dry-run-validation]
    if: ${{ needs.dry-run-validation.outputs.dry-run-success == 'true' && github.event.inputs.skip_dry_run == 'false' }}
    runs-on: ubuntu-latest
    environment: production-approval
    
    steps:
    - name: Manual approval required
      run: |
        echo "🔒 Manual approval required before proceeding with ArgoCD upgrade"
        echo "Dry run validation completed successfully"
        echo "Review the dry run artifacts before approving"

  actual-upgrade:
    needs: [dry-run-validation, approval-gate]
    if: ${{ always() && (needs.approval-gate.result == 'success' || github.event.inputs.skip_dry_run == 'true') && needs.dry-run-validation.outputs.dry-run-success == 'true' }}
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.REGION }}
        
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region $REGION --name $CLUSTER_NAME
        
    - name: Install Helm
      uses: azure/setup-helm@v4
      with:
        version: '3.12.0'
        
    - name: Add ArgoCD Helm repo
      run: |
        helm repo add argo https://argoproj.github.io/argo-helm
        helm repo update
        
    - name: Execute actual upgrade
      env:
        S3_BACKUP_BUCKET: ${{ env.S3_BACKUP_BUCKET }}
      run: |
        cd argocd
        chmod +x upgrade-comprehensive.sh
        ./upgrade-comprehensive.sh ${{ github.event.inputs.target_version }} ${{ github.event.inputs.helm_chart_version }} false
        
    - name: Upload upgrade artifacts
      uses: actions/upload-artifact@v4
      with:
        name: upgrade-results-${{ github.run_number }}
        path: argocd/backup/
        retention-days: 30
        
    - name: Upgrade summary
      run: |
        echo "## 🚀 Upgrade Results" >> $GITHUB_STEP_SUMMARY
        echo "- **Target Version**: ${{ github.event.inputs.target_version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Chart Version**: ${{ github.event.inputs.helm_chart_version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ✅ Upgrade Completed" >> $GITHUB_STEP_SUMMARY
        
        # Get current version
        CURRENT_VERSION=$(kubectl get deployment argocd-server -n argocd -o jsonpath='{.spec.template.spec.containers[0].image}')
        echo "- **Current Version**: $CURRENT_VERSION" >> $GITHUB_STEP_SUMMARY